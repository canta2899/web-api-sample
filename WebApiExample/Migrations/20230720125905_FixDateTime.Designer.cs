// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApiExample.Services;

#nullable disable

namespace WebApiExample.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20230720125905_FixDateTime")]
    partial class FixDateTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleShop", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("integer");

                    b.Property<int>("ShopsId")
                        .HasColumnType("integer");

                    b.HasKey("ArticlesId", "ShopsId");

                    b.HasIndex("ShopsId");

                    b.ToTable("ArticleShop");
                });

            modelBuilder.Entity("WebApiExample.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 1,
                            Description = "Kinder Fetta al Latte"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Description = "Astronave Lego"
                        },
                        new
                        {
                            Id = 3,
                            Category = 0,
                            Description = "Tagliera per salame"
                        });
                });

            modelBuilder.Entity("WebApiExample.Model.ArticleShop", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<int>("ShopId")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId", "ShopId");

                    b.HasIndex("ShopId");

                    b.ToTable("ArticleShops");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            ShopId = 1
                        },
                        new
                        {
                            ArticleId = 2,
                            ShopId = 1
                        },
                        new
                        {
                            ArticleId = 1,
                            ShopId = 2
                        },
                        new
                        {
                            ArticleId = 3,
                            ShopId = 2
                        });
                });

            modelBuilder.Entity("WebApiExample.Model.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1983, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Pera",
                            Name = "Zio"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1993, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            LastName = "Magno",
                            Name = "Alessandro"
                        });
                });

            modelBuilder.Entity("WebApiExample.Model.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Via Paoli, 0, Udine",
                            ManagerId = 1,
                            Name = "Negozio di Udine"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Via Paoli, 0, Udine",
                            ManagerId = 2,
                            Name = "Negozio di Lignano"
                        });
                });

            modelBuilder.Entity("ArticleShop", b =>
                {
                    b.HasOne("WebApiExample.Model.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiExample.Model.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiExample.Model.ArticleShop", b =>
                {
                    b.HasOne("WebApiExample.Model.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiExample.Model.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("WebApiExample.Model.Shop", b =>
                {
                    b.HasOne("WebApiExample.Model.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });
#pragma warning restore 612, 618
        }
    }
}
